using System;
using System.IO;
using System.Text;

namespace AudioDecrypt
{
    /// <summary>
    /// 酷狗音乐KGM格式基础解密类
    /// </summary>
    public abstract class KgmDecryptorBase : MusicDecryptorBase
    {
        // VPR格式掩码差异
        protected static readonly byte[] VPR_MASK_DIFF = new byte[] { 
            0x25, 0xDF, 0xE8, 0xA6, 0x75, 0x1E, 0x75, 0x0E, 
            0x2F, 0x80, 0xF3, 0x2D, 0xB8, 0xB6, 0xE3, 0x11, 0x00 
        };
        
        // Table1
        protected static readonly byte[] TABLE1 = new byte[] {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x01, 0x21, 0x01, 0x61, 0x01, 0x21, 0x01, 0xe1, 0x01, 0x21, 0x01, 0x61, 0x01, 0x21, 0x01,
            0xd2, 0x23, 0x02, 0x02, 0x42, 0x42, 0x02, 0x02, 0xc2, 0xc2, 0x02, 0x02, 0x42, 0x42, 0x02, 0x02,
            0xd3, 0xd3, 0x02, 0x03, 0x63, 0x43, 0x63, 0x03, 0xe3, 0xc3, 0xe3, 0x03, 0x63, 0x43, 0x63, 0x03,
            0x94, 0xb4, 0x94, 0x65, 0x04, 0x04, 0x04, 0x04, 0x84, 0x84, 0x84, 0x84, 0x04, 0x04, 0x04, 0x04,
            0x95, 0x95, 0x95, 0x95, 0x04, 0x05, 0x25, 0x05, 0xe5, 0x85, 0xa5, 0x85, 0xe5, 0x05, 0x25, 0x05,
            0xd6, 0xb6, 0x96, 0xb6, 0xd6, 0x27, 0x06, 0x06, 0xc6, 0xc6, 0x86, 0x86, 0xc6, 0xc6, 0x06, 0x06,
            0xd7, 0xd7, 0x97, 0x97, 0xd7, 0xd7, 0x06, 0x07, 0xe7, 0xc7, 0xe7, 0x87, 0xe7, 0xc7, 0xe7, 0x07,
            0x18, 0x38, 0x18, 0x78, 0x18, 0x38, 0x18, 0xe9, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
            0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x08, 0x09, 0x29, 0x09, 0x69, 0x09, 0x29, 0x09,
            0xda, 0x3a, 0x1a, 0x3a, 0x5a, 0x3a, 0x1a, 0x3a, 0xda, 0x2b, 0x0a, 0x0a, 0x4a, 0x4a, 0x0a, 0x0a,
            0xdb, 0xdb, 0x1b, 0x1b, 0x5b, 0x5b, 0x1b, 0x1b, 0xdb, 0xdb, 0x0a, 0x0b, 0x6b, 0x4b, 0x6b, 0x0b,
            0x9c, 0xbc, 0x9c, 0x7c, 0x1c, 0x3c, 0x1c, 0x7c, 0x9c, 0xbc, 0x9c, 0x6d, 0x0c, 0x0c, 0x0c, 0x0c,
            0x9d, 0x9d, 0x9d, 0x9d, 0x1d, 0x1d, 0x1d, 0x1d, 0x9d, 0x9d, 0x9d, 0x9d, 0x0c, 0x0d, 0x2d, 0x0d,
            0xde, 0xbe, 0x9e, 0xbe, 0xde, 0x3e, 0x1e, 0x3e, 0xde, 0xbe, 0x9e, 0xbe, 0xde, 0x2f, 0x0e, 0x0e,
            0xdf, 0xdf, 0x9f, 0x9f, 0xdf, 0xdf, 0x1f, 0x1f, 0xdf, 0xdf, 0x9f, 0x9f, 0xdf, 0xdf, 0x0e, 0x0f,
            0x00, 0x20, 0x00, 0x60, 0x00, 0x20, 0x00, 0xe0, 0x00, 0x20, 0x00, 0x60, 0x00, 0x20, 0x00, 0xf1
        };
        
        // Table2
        protected static readonly byte[] TABLE2 = new byte[] {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x01, 0x23, 0x01, 0x67, 0x01, 0x23, 0x01, 0xef, 0x01, 0x23, 0x01, 0x67, 0x01, 0x23, 0x01,
            0xdf, 0x21, 0x02, 0x02, 0x46, 0x46, 0x02, 0x02, 0xce, 0xce, 0x02, 0x02, 0x46, 0x46, 0x02, 0x02,
            0xde, 0xde, 0x02, 0x03, 0x65, 0x47, 0x65, 0x03, 0xed, 0xcf, 0xed, 0x03, 0x65, 0x47, 0x65, 0x03,
            0x9d, 0xbf, 0x9d, 0x63, 0x04, 0x04, 0x04, 0x04, 0x8c, 0x8c, 0x8c, 0x8c, 0x04, 0x04, 0x04, 0x04,
            0x9c, 0x9c, 0x9c, 0x9c, 0x04, 0x05, 0x27, 0x05, 0xeb, 0x8d, 0xaf, 0x8d, 0xeb, 0x05, 0x27, 0x05,
            0xdb, 0xbd, 0x9f, 0xbd, 0xdb, 0x25, 0x06, 0x06, 0xca, 0xca, 0x8e, 0x8e, 0xca, 0xca, 0x06, 0x06,
            0xda, 0xda, 0x9e, 0x9e, 0xda, 0xda, 0x06, 0x07, 0xe9, 0xcb, 0xe9, 0x8f, 0xe9, 0xcb, 0xe9, 0x07,
            0x19, 0x3b, 0x19, 0x7f, 0x19, 0x3b, 0x19, 0xe7, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
            0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x08, 0x09, 0x2b, 0x09, 0x6f, 0x09, 0x2b, 0x09,
            0xd7, 0x39, 0x1b, 0x39, 0x5f, 0x39, 0x1b, 0x39, 0xd7, 0x29, 0x0a, 0x0a, 0x4e, 0x4e, 0x0a, 0x0a,
            0xd6, 0xd6, 0x1a, 0x1a, 0x5e, 0x5e, 0x1a, 0x1a, 0xd6, 0xd6, 0x0a, 0x0b, 0x6d, 0x4f, 0x6d, 0x0b,
            0x95, 0xb7, 0x95, 0x7b, 0x1d, 0x3f, 0x1d, 0x7b, 0x95, 0xb7, 0x95, 0x6b, 0x0c, 0x0c, 0x0c, 0x0c,
            0x94, 0x94, 0x94, 0x94, 0x1c, 0x1c, 0x1c, 0x1c, 0x94, 0x94, 0x94, 0x94, 0x0c, 0x0d, 0x2f, 0x0d,
            0xd3, 0xb5, 0x97, 0xb5, 0xd3, 0x3d, 0x1f, 0x3d, 0xd3, 0xb5, 0x97, 0xb5, 0xd3, 0x2d, 0x0e, 0x0e,
            0xd2, 0xd2, 0x96, 0x96, 0xd2, 0xd2, 0x1e, 0x1e, 0xd2, 0xd2, 0x96, 0x96, 0xd2, 0xd2, 0x0e, 0x0f,
            0x00, 0x22, 0x00, 0x66, 0x00, 0x22, 0x00, 0xee, 0x00, 0x22, 0x00, 0x66, 0x00, 0x22, 0x00, 0xfe
        };
        
        // 预定义掩码V2
        protected static readonly byte[] MASK_V2_PRE_DEF = new byte[] {
            0xB8, 0xD5, 0x3D, 0xB2, 0xE9, 0xAF, 0x78, 0x8C, 0x83, 0x33, 0x71, 0x51, 0x76, 0xA0, 0xCD, 0x37,
            0x2F, 0x3E, 0x35, 0x8D, 0xA9, 0xBE, 0x98, 0xB7, 0xE7, 0x8C, 0x22, 0xCE, 0x5A, 0x61, 0xDF, 0x68,
            0x69, 0x89, 0xFE, 0xA5, 0xB6, 0xDE, 0xA9, 0x77, 0xFC, 0xC8, 0xBD, 0xBD, 0xE5, 0x6D, 0x3E, 0x5A,
            0x36, 0xEF, 0x69, 0x4E, 0xBE, 0xE1, 0xE9, 0x66, 0x1C, 0xF3, 0xD9, 0x02, 0xB6, 0xF2, 0x12, 0x9B,
            0x44, 0xD0, 0x6F, 0xB9, 0x35, 0x89, 0xB6, 0x46, 0x6D, 0x73, 0x82, 0x06, 0x69, 0xC1, 0xED, 0xD7,
            0x85, 0xC2, 0x30, 0xDF, 0xA2, 0x62, 0xBE, 0x79, 0x2D, 0x62, 0x62, 0x3D, 0x0D, 0x7E, 0xBE, 0x48,
            0x89, 0x23, 0x02, 0xA0, 0xE4, 0xD5, 0x75, 0x51, 0x32, 0x02, 0x53, 0xFD, 0x16, 0x3A, 0x21, 0x3B,
            0x16, 0x0F, 0xC3, 0xB2, 0xBB, 0xB3, 0xE2, 0xBA, 0x3A, 0x3D, 0x13, 0xEC, 0xF6, 0x01, 0x45, 0x84,
            0xA5, 0x70, 0x0F, 0x93, 0x49, 0x0C, 0x64, 0xCD, 0x31, 0xD5, 0xCC, 0x4C, 0x07, 0x01, 0x9E, 0x00,
            0x1A, 0x23, 0x90, 0xBF, 0x88, 0x1E, 0x3B, 0xAB, 0xA6, 0x3E, 0xC4, 0x73, 0x47, 0x10, 0x7E, 0x3B,
            0x5E, 0xBC, 0xE3, 0x00, 0x84, 0xFF, 0x09, 0xD4, 0xE0, 0x89, 0x0F, 0x5B, 0x58, 0x70, 0x4F, 0xFB,
            0x65, 0xD8, 0x5C, 0x53, 0x1B, 0xD3, 0xC8, 0xC6, 0xBF, 0xEF, 0x98, 0xB0, 0x50, 0x4F, 0x0F, 0xEA,
            0xE5, 0x83, 0x58, 0x8C, 0x28, 0x2C, 0x84, 0x67, 0xCD, 0xD0, 0x9E, 0x47, 0xDB, 0x27, 0x50, 0xCA,
            0xF4, 0x63, 0x63, 0xE8, 0x97, 0x7F, 0x1B, 0x4B, 0x0C, 0xC2, 0xC1, 0x21, 0x4C, 0xCC, 0x58, 0xF5,
            0x94, 0x52, 0xA3, 0xF3, 0xD3, 0xE0, 0x68, 0xF4, 0x00, 0x23, 0xF3, 0x5E, 0x0A, 0x7B, 0x93, 0xDD,
            0xAB, 0x12, 0xB2, 0x13, 0xE8, 0x84, 0xD7, 0xA7, 0x9F, 0x0F, 0x32, 0x4C, 0x55, 0x1D, 0x04, 0x36,
            0x52, 0xDC, 0x03, 0xF3, 0xF9, 0x4E, 0x42, 0xE9, 0x3D, 0x61, 0xEF, 0x7C, 0xB6, 0xB3, 0x93, 0x50,
        };
        
        // 音乐类型枚举
        protected enum MusicType { FLAC, MP3 };
        
        protected string _filePath;
        protected FileStream _fileStream;
        protected FileStream _outputFileStream;
        protected string _outputFilePath;
        protected int _headerLen = 0;
        protected byte[] _key;
        protected MusicType _musicType = MusicType.FLAC;

        /// <summary>
        /// 跳过文件头
        /// </summary>
        protected void JumpHeader()
        {
            _fileStream.Seek(16, SeekOrigin.Begin);
        }

        /// <summary>
        /// 创建临时输出文件
        /// </summary>
        protected void CreateTempOutputFile(string outputDir)
        {
            string tempPath = Path.Combine(outputDir, Path.GetFileNameWithoutExtension(_filePath));
            
            // 如果临时文件已存在，先删除
            if (File.Exists(tempPath))
            {
                File.Delete(tempPath);
            }
            
            _outputFileStream = new FileStream(tempPath, FileMode.Create, FileAccess.Write);
            _outputFilePath = tempPath;
        }

        /// <summary>
        /// 获取头部长度
        /// </summary>
        protected void GetHeaderLen()
        {
            byte[] lenBytes = new byte[4];
            ReadExact(_fileStream, lenBytes, 0, 4);
            _headerLen = BitConverter.ToInt32(lenBytes, 0);
        }

        /// <summary>
        /// 获取密钥
        /// </summary>
        protected void GetKey()
        {
            _key = new byte[17]; // 最后一个字节为0
            _fileStream.Seek(28, SeekOrigin.Begin);
            ReadExact(_fileStream, _key, 0, 16);
        }

        /// <summary>
        /// 判断音乐类型
        /// </summary>
        protected void JudgeMusicType()
        {
            byte[] FLAC_HEADER = Encoding.ASCII.GetBytes("fLa");
            byte[] MP3_HEADER = Encoding.ASCII.GetBytes("ID3");
            byte[] header = new byte[4];
            
            using (FileStream musicFile = new FileStream(_outputFilePath, FileMode.Open, FileAccess.Read))
            {
                ReadExact(musicFile, header, 0, 3);
                
                if (CompareBytes(header, FLAC_HEADER, 3))
                {
                    _musicType = MusicType.FLAC;
                }
                else if (CompareBytes(header, MP3_HEADER, 3))
                {
                    _musicType = MusicType.MP3;
                }
                else
                {
                    // 不支持的格式，删除临时文件
                    musicFile.Close();
                    File.Delete(_outputFilePath);
                    throw new Exception($"不支持的文件类型: {_outputFilePath}");
                }
            }
        }

        /// <summary>
        /// 比较字节数组
        /// </summary>
        private bool CompareBytes(byte[] arr1, byte[] arr2, int length)
        {
            for (int i = 0; i < length; i++)
            {
                if (arr1[i] != arr2[i])
                    return false;
            }
            return true;
        }

        /// <summary>
        /// 重命名文件
        /// </summary>
        protected void RenameFile()
        {
            // 由于C#中没有直接对应TagLib的替代，这里我们只实现文件扩展名的变更
            // 实际项目中，建议使用TagLib#库读取元数据并实现完整功能
            
            string newPath = _outputFilePath;
            
            if (_musicType == MusicType.FLAC)
            {
                newPath += ".flac";
            }
            else if (_musicType == MusicType.MP3)
            {
                newPath += ".mp3";
            }
            
            // 如果目标文件已存在，先删除
            if (File.Exists(newPath))
            {
                File.Delete(newPath);
            }
            
            // 重命名文件
            File.Move(_outputFilePath, newPath);
        }

        private void ReadExact(Stream stream, byte[] buffer, int offset, int count)
        {
            int read;
            while (count > 0 && (read = stream.Read(buffer, offset, count)) > 0)
            {
                offset += read;
                count -= read;
            }
            if (count > 0)
                throw new EndOfStreamException("未能读取到足够的数据");
        }
    }

    /// <summary>
    /// 酷狗KGM格式解密
    /// </summary>
    public class KgmDecryptor : KgmDecryptorBase
    {
        /// <summary>
        /// 解密KGM文件
        /// </summary>
        public override void Decrypt(MusicDecryptConfig config)
        {
            _filePath = config.FilePath;
            _fileStream = new FileStream(_filePath, FileMode.Open, FileAccess.Read);
            
            try
            {
                JumpHeader();
                GetHeaderLen();
                GetKey();
                CreateTempOutputFile(config.OutputDir);
                
                // 正式解密
                _fileStream.Seek(_headerLen, SeekOrigin.Begin);
                long pos = 0, offset = 0;
                byte med8, msk8;
                byte[] buffer = new byte[4096];
                int bytesRead;
                
                while ((bytesRead = _fileStream.Read(buffer, 0, buffer.Length)) > 0)
                {
                    for (int i = 0; i < bytesRead; i++)
                    {
                        med8 = (byte)((_key[pos % 17]) ^ buffer[i]);
                        med8 ^= (byte)((med8 & 15) << 4);
                        msk8 = 0;
                        offset = pos >> 4;
                        
                        while (offset >= 0x11)
                        {
                            msk8 ^= TABLE1[offset % 272];
                            offset >>= 4;
                            msk8 ^= TABLE2[offset % 272];
                            offset >>= 4;
                        }
                        
                        msk8 = (byte)(MASK_V2_PRE_DEF[pos % 272] ^ msk8);
                        msk8 ^= (byte)((msk8 & 15) << 4);
                        
                        buffer[i] = (byte)(med8 ^ msk8);
                        pos++;
                    }
                    
                    _outputFileStream.Write(buffer, 0, bytesRead);
                }
                
                _outputFileStream.Flush();
                _outputFileStream.Close();
                _fileStream.Close();
                
                // 判断文件类型并重命名
                JudgeMusicType();
                RenameFile();
            }
            finally
            {
                _fileStream?.Close();
                _outputFileStream?.Close();
            }
        }
    }

    /// <summary>
    /// 酷狗VPR格式解密
    /// </summary>
    public class VprDecryptor : KgmDecryptorBase
    {
        /// <summary>
        /// 解密VPR文件
        /// </summary>
        public override void Decrypt(MusicDecryptConfig config)
        {
            _filePath = config.FilePath;
            _fileStream = new FileStream(_filePath, FileMode.Open, FileAccess.Read);
            
            try
            {
                JumpHeader();
                GetHeaderLen();
                GetKey();
                CreateTempOutputFile(config.OutputDir);
                
                // 正式解密
                _fileStream.Seek(_headerLen, SeekOrigin.Begin);
                long pos = 0, offset = 0;
                byte med8, msk8;
                byte[] buffer = new byte[4096];
                int bytesRead;
                
                while ((bytesRead = _fileStream.Read(buffer, 0, buffer.Length)) > 0)
                {
                    for (int i = 0; i < bytesRead; i++)
                    {
                        med8 = (byte)((_key[pos % 17]) ^ buffer[i]);
                        med8 ^= (byte)((med8 & 15) << 4);
                        msk8 = 0;
                        offset = pos >> 4;
                        
                        while (offset >= 0x11)
                        {
                            msk8 ^= TABLE1[offset % 272];
                            offset >>= 4;
                            msk8 ^= TABLE2[offset % 272];
                            offset >>= 4;
                        }
                        
                        msk8 = (byte)(MASK_V2_PRE_DEF[pos % 272] ^ msk8);
                        msk8 ^= (byte)((msk8 & 15) << 4);
                        
                        // 基本解密
                        buffer[i] = (byte)(med8 ^ msk8);
                        
                        // VPR格式特有的额外异或操作
                        buffer[i] ^= VPR_MASK_DIFF[pos % 17];
                        
                        pos++;
                    }
                    
                    _outputFileStream.Write(buffer, 0, bytesRead);
                }
                
                // 关闭流
                _fileStream.Close();
                _outputFileStream.Close();
                
                // 判断音乐类型
                JudgeMusicType();
                
                // 重命名文件
                RenameFile();
            }
            catch (Exception)
            {
                // 关闭流
                _fileStream?.Close();
                _outputFileStream?.Close();
                
                // 删除临时文件
                if (File.Exists(_outputFilePath))
                {
                    File.Delete(_outputFilePath);
                }
                
                throw;
            }
        }
    }
} 